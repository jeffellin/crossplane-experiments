apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xmyhelmishdatastore.ellin.net
spec:
  writeConnectionSecretsToNamespace: other-namespace
  compositeTypeRef:
    apiVersion: ellin.net/v1alpha1
    kind: XMyHelmishDataStore
  resources:
    - name: helm-store
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:         
          # write secret name will be determined by patch
          writeConnectionSecretToRef:
            namespace: default
            name: TBD
          connectionDetails:
          # Get the connectionDetails from the resources
          # generated by the helm chart.
            - apiVersion: v1
              kind: Secret
              name: brigade-jellin-wgjd2-vqp7k-mysql
              namespace: default
              fieldPath: data.postgres-password
              toConnectionSecretKey: password
            - apiVersion: v1
              kind: Service
              name: brigade-jellin-wgjd2-vqp7k-mysql
              namespace: default
              fieldPath: spec.ports[0].port
              toConnectionSecretKey: port
            - apiVersion: v1
              kind: Service
              name: brigade-jellin-wgjd2-vqp7k-mysql
              fieldPath: spec.clusterIPs[0]
              namespace: default
              toConnectionSecretKey: host
          forProvider:
            namespace: default
            # values for the chart
            values:
              primary:
                persistence:
                  enabled: false
            # chart to install
            chart:
              name: postgresql
              repository: oci://registry-1.docker.io/bitnamicharts
      connectionDetails:
         # build the connection details for the helm managed resource
       - name: type
         value: postgres
       - fromConnectionSecretKey: port
       - fromConnectionSecretKey: host
       - name: username
         value: postgres
       - fromConnectionSecretKey: password
      patches:
        # get the values for the chart from the claim
        - fromFieldPath: "spec.enablePersistence"
          toFieldPath: "spec.forProvider.values.primary.persistence.enabled"
       # set the name of the secret for the connection details
        - fromFieldPath: "metadata.uid"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
            - type: string
              string:
                fmt: "%s-secret1"
        # copy the secret to the Compisition
        - type: FromCompositeFieldPath
          fromFieldPath: "metadata.uid"
          toFieldPath: "metadata.labels['binding']"
        # copy the secret to the status.binding.name field
        # this is needed for the the service binding spec
        - type: ToCompositeFieldPath
          fromFieldPath: "metadata.labels['binding']"
          toFieldPath: "status.binding.name"
        ## use the name of the chart to get the name
        ## of the resources created by the chart.
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.labels['chartfullname']
          transforms:
            - type: string
              string:
                fmt: "%s-postgresql"
        - fromFieldPath: metadata.labels['chartfullname']
          toFieldPath: spec.connectionDetails[0].name
        - fromFieldPath: metadata.labels['chartfullname']
          toFieldPath: spec.connectionDetails[1].name
        - fromFieldPath: metadata.labels['chartfullname']
          toFieldPath: spec.connectionDetails[2].name
          ## override some values from the claim if set
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.providerConfigName
          toFieldPath: spec.providerConfigRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.tags
          toFieldPath: spec.forProvider.tags
          policy:
            mergeOptions:
              keepMapValues: true
