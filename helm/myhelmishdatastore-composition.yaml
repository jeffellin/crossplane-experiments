apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xmyhelmishdatastore.ellin.net
spec:
  writeConnectionSecretsToNamespace: other-namespace
  compositeTypeRef:
    apiVersion: ellin.net/v1alpha1
    kind: XMyHelmishDataStore
  mode: Pipeline
  pipeline:
  - step: patch-and-transform
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
        - name: helm-store
          base:
            apiVersion: helm.crossplane.io/v1beta1
            kind: Release
            spec:
              # write secret name will be determined by patch
              writeConnectionSecretToRef:
                namespace: default
                name: TBD
              connectionDetails:
              # Get the connectionDetails from the resources
              # generated by the helm chart.
                - apiVersion: v1
                  kind: Secret
                  name: TBD
                  namespace: default
                  fieldPath: data.postgres-password
                  toConnectionSecretKey: password
                - apiVersion: v1
                  kind: Service
                  name: TBD
                  namespace: default
                  fieldPath: spec.ports[0].port
                  toConnectionSecretKey: port
                - apiVersion: v1
                  kind: Service
                  name: TBD
                  fieldPath: spec.clusterIPs[0]
                  namespace: default
                  toConnectionSecretKey: host
              forProvider:
                namespace: default
                # values for the chart
                values:
                  primary:
                    persistence:
                      enabled: false
                  auth:
                    database: TBD
                # chart to install
                chart:
                  name: postgresql
                  repository: oci://registry-1.docker.io/bitnamicharts
          connectionDetails:
            # build the connection details for the helm managed resource
          - name: type
            value: postgresql
            type: FromValue
          - fromConnectionSecretKey: port
            type: FromConnectionSecretKey
            name: port
          - fromConnectionSecretKey: host
            type: FromConnectionSecretKey
            name: host
          - name: username
            value: postgres
            type: FromValue
          - fromConnectionSecretKey: password
            type: FromConnectionSecretKey
            name: password
          - name: database
            type: FromFieldPath
            fromFieldPath: spec.forProvider.values.auth.database
          patches:
            # get the values for the chart from the claim
            - fromFieldPath: "spec.enablePersistence"
              toFieldPath: "spec.forProvider.values.primary.persistence.enabled"
            - fromFieldPath: "spec.databasename"
              toFieldPath: "spec.forProvider.values.auth.database"
          # set the name of the secret for the connection details
            - fromFieldPath: "metadata.uid"
              toFieldPath: "spec.writeConnectionSecretToRef.name"
              transforms:
                - type: string
                  string:
                    type: "Format"
                    fmt: "%s-secret1"
            # copy the secret to the Compisition
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.writeConnectionSecretToRef.name"
              toFieldPath: "metadata.labels['binding']"
            # copy the secret to the status.binding.name field
            # this is needed for the the service binding spec
            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.labels['binding']"
              toFieldPath: "status.binding.name"
            ## use the name of the chart to get the name
            ## of the resources created by the chart.
            - type: ToCompositeFieldPath
              fromFieldPath: metadata.name
              toFieldPath: metadata.labels['chartfullname']
              transforms:
                - type: string
                  string:
                    type: "Format"
                    fmt: "%s-postgresql"
            - fromFieldPath: metadata.labels['chartfullname']
              toFieldPath: spec.connectionDetails[0].name
            - fromFieldPath: metadata.labels['chartfullname']
              toFieldPath: spec.connectionDetails[1].name
            - fromFieldPath: metadata.labels['chartfullname']
              toFieldPath: spec.connectionDetails[2].name
          